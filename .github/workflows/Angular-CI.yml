name: Angular CI

on:
  push:
    branches: [ "master", "develop" ]  # Déclenche le pipeline sur push vers master/develop
  pull_request:
    branches: [ "master", "develop" ]  # Déclenche aussi sur les Pull Requests

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # Récupère le code

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18  # Version de Node.js (à adapter)

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci  # Installe les dépendances (version exacte)

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Run ESLint
        run: npm run lint  # Lance le linting (ng lint)

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Run unit tests
        run: npm test  # Lance les tests unitaires (ng test --watch=false)

  typecheck:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Run TypeScript type check
        run: npx tsc --noEmit  # Vérifie les erreurs TypeScript sans générer de fichiers

  build:
    needs: [lint, test, typecheck]  # Attend que lint, test et typecheck réussissent
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Build Angular app
        run: npm run build -- --configuration=production  # Build en mode production
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: angular-build
          path: dist/  # Dossier de build Angular
          retention-days: 7  # Garde les artifacts 7 jours

  security:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Run npm audit (critical only)
        run: npm audit --omit=dev --audit-level=critical  # Bloque si vulnérabilité critique

      - name: Run npm audit (full report)
        run: npm audit --json > npm-audit.json || true  # Génère un rapport même si échec

      - name: Upload npm audit report
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-report
          path: npm-audit.json
          retention-days: 7
